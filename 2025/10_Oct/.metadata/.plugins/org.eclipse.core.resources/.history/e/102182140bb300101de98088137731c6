package BOJ_NM9_15663;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

// 중복이 없는 순열 - DFS
public class Main {
	static int[] list; // 원본 리스트
	static int[] result; // 결과 리스트
	static boolean[] visited; // 방문 리스트
	static int R; // 뽑을 원소 수
	static int N; // 리스트 총 원소
	static Set<String> set = new HashSet<>();
	public static void main(String[] args) throws FileNotFoundException {
		File file = new File("./src/BOJ_NM9_15663/input.txt");
		Scanner sc = new Scanner(file);
//		Scanner sc = new Scanner(System.in);

		// #### 데이터 입력 ####
		N = sc.nextInt(); // 리스트 총 원소
		R = sc.nextInt(); // 뽑을 원소 수
		list = new int[N];
		for (int i = 0; i < N; i++) {
			list[i] = sc.nextInt();
		}
		
		// #### 중복 데이터 삭제 ####
		Arrays.sort(list);
		
		// #### 기본 변수 설정 ####
		result = new int[R];
		visited = new boolean[N];
		
		// #### permutation 함수 사용 ####
		permutation(0);
		
//		String[] real = set.toArray(new String[0]);
//		Arrays.sort(real);
		for (String s : set) {
			System.out.println(s);
		}
	} // main
	
	// #### 중복이 없는 순열 ####
	public static void permutation(int idx) {
		// 1. 탈출 조건
		if (idx == R) {
			// 1-1. 결과 원소 출력 
			StringBuilder sb = new StringBuilder();
			for (int r : result) {
				sb.append(r + " ");
			}
			set.add(sb.toString());
			return;
		}

//		int prev = -1;
		
		// 2. 모든 원소 탐색
		for (int i = 0; i < N; i++) {
			// 2-1. 탐색한 원소가 아닐 경우 -> 탐색하자!
			if (!visited[i]) {
//				if (list[i] == prev) {
//					continue;
//				}
				// 2-1-a. 결과 칸에 넣기
				result[idx] = list[i];
				// 2-1-b. 탐색했다고 표시
				visited[i] = true;
				// 2-1-c. 다음 칸에 들어올 원소 탐색 (재귀)
				permutation(idx + 1);
				// 2-1-d. 원복 (백트래킹)
				visited[i] = false;
//				prev = list[i];
			}
		}
	}

}
