package BOJ_NM1_15649;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Arrays;
import java.util.Scanner;

public class Main {
	// 중복이 없는 순열 - DFS
	static int[] list; // 원본 리스트
	static int[] result; // 결과 리스트
	static boolean[] visited; // 방문 기록
	static int N; // 총 데이터 개수
	static int R; // 뽑을 숫자
	public static void main(String[] args) throws FileNotFoundException {
		File file = new File("./BOJ_NM1_15649/input.txt");
		Scanner sc = new Scanner(file);
		
		// #### 입력 시작 #####
		N = sc.nextInt(); // 총 데이터 수
		R = sc.nextInt(); // 뽑을 수
		// #### 입력 종료 #####
		
		// #### 기본 데이터 생성 시작 ####
		list = new int[N];
		for (int i = 0; i < N; i++) {
			list[i] = i + 1;
		} // 원본 리스트 생성
		result = new int[R]; // 결과 리스트 생성
		visited = new boolean[N]; // 방문 기록 리스트 생성
		// #### 기본 데이터 생성 종료 ####

		// #### permutation 함수 실행 시작 ####
		permutation(0); // 처음부터 탐색
		// #### permutation 함수 실행 종료 ####
	} // main
	
	// 중복이 없는 순열 - DFS
	public static void permutation(int idx) {
		// 1. 종료 조건
		if (idx == R) {
			System.out.println(Arrays.toString(result));
			return;
		}
		// 2. 모든 원소 탐색
		for (int i = 0; i < N; i++) {
			// 2-1. 처음 탐색하는 원소인 경우
			if (!visited[i]) {
				// 2-1-a. 원소 담기
				result[idx] = list[i];
				// 2-1-b. 확인한 원소로 변환
				visited[i] = true;
				// 2-1-c. 다음 원소 선택 (재귀)
				permutation(idx + 1);
				// 2-1-d. 원복 (백트래킹)
				visited[i] = false;
			}
		}
	}
}
